---
import Container from 'shared/_components/container/index.astro'
---

<section class="mindset">
	<Container class="mindset__container">
		<h3>Mindset Changes</h3>
		<ul class="mindset__list">
			<li>
				<h4>Reimagining the Role of JSX: Unleashing Front-end Flexibility</h4>
				<p>
					Undeniably, JSX has gained immense popularity in today's development landscape. However, we firmly believe that JSX should not impose a dependency on Node across the board. We understand that many applications are built using robust back-end frameworks like Laravel, Wordpress, Magento, Rails, Drupal, Joomla, VTEX, and the list goes on.
					Forcing a migration to a Node environment solely for the purpose of running JSX on the server side seems unnecessary.
				</p>
				<p>
					Moreover, JSX can sometimes blur the lines of Separation of Concerns, intertwining your view and rendering logic with your JavaScript application.
					This can lead to a larger codebase with excessive imports in your component code, ultimately impacting your bundle size and main thread tasks. These performance implications can negatively affect your web application's overall loading speed.
				</p>

			</li>
			<li>
				<h4>Discover the Power of Event-Driven Architecture</h4>
				<p>
					Event-driven architecture is a remarkable way to develop systems that are loosely coupled. It's like the magic behind how browsers and the DOM work, yet it's a feature often overlooked in modern frameworks.
				</p>
				<p>
					Modern frameworks tend to lean towards a reactive nature, focusing on tracking changes in object properties. However, JavaScript doesn't efficiently handle deep object comparisons, so relying on this weakness as the main feature of a framework doesn't make much sense.
				</p>
				<p>
					As a result, we often see bloated components with multiple behaviors that could be better addressed through external events attached to those elements. This is particularly true when it comes to incorporating cross-concern behaviors.
				</p>
				<p>
					By responding to events, you gain complete control over the flow of your application, rather than delegating it entirely to your framework. This helps you avoid infinite loops and the cognitive challenges that can come with managing complex library flows.
				</p>
			</li>
			<li>
				<h4>Eliminating Vendor Lock-in for Greater Flexibility</h4>
				<p>
					Choosing a preferred framework often comes with the downside of losing the ability to leverage the vast JavaScript ecosystem. Integrating with popular JavaScript libraries can be challenging and sometimes requires waiting for library ports to connect to your application.
				</p>
				<p>
					This is why we see a multitude of redundant libraries being created to handle common UI tasks such as charts, sliders, infinite scrolling, forms, routers, and more. At our core, we believe that frameworks and application libraries should empower developers to build JavaScript-based solutions rather than creating specific alternatives.
				</p>
				<p>
					Let's take a look at some examples of redundant solutions: Next, Nuxt, Svelte Kit, Angular Universal, and Solid Start. These options, while valuable in their own right, can sometimes lead to unnecessary duplication of effort.
				</p>
				<p>
					For instance, this very site was developed using Astro, a framework that has no relationship with Jails. Alternatively, webpack could have been utilized with webpack-html-plugin, leveraging various node template libraries like Ejs, Pug, Nunjucks, Handlebars, or even other static site generators available.
				</p>
				<p>
					By embracing a flexible approach, we can break free from vendor lock-in and unlock the full potential of the JavaScript ecosystem.
				</p>
			</li>
		</ul>
	</Container>
</section>

<style lang="styl">

	.mindset
		padding 80px 0

		h3
			font-size 35px
			font-weight 300
			text-align center
			margin-bottom 80px

		&__container
			padding 0 40px

		&__list
			list-style none

			li
				margin 20px 0
				padding 10px 0


			h4
				font-weight bold
				font-size 25px
				text-align center

			p
				margin 15px 0

</style>
